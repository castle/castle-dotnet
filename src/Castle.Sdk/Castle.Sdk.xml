<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Sdk</name>
    </assembly>
    <members>
        <member name="T:Castle.CastleClient">
            <summary>
            Main SDK entry point
            </summary>
        </member>
        <member name="M:Castle.CastleClient.#ctor(Castle.Config.CastleConfiguration)">
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="configuration"/> is null</exception>
        </member>
        <member name="M:Castle.CastleClient.GetDevicesForUser(System.String,System.String)">
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="userId"/> is null or empty</exception>>
        </member>
        <member name="M:Castle.CastleClient.GetDevice(System.String)">
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="deviceToken"/> is null or empty</exception>>
        </member>
        <member name="M:Castle.CastleClient.ApproveDevice(System.String)">
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="deviceToken"/> is null or empty</exception>>
        </member>
        <member name="M:Castle.CastleClient.ReportDevice(System.String)">
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="deviceToken"/> is null or empty</exception>>
        </member>
        <member name="M:Castle.CastleClient.ImpersonateStart(Castle.Messages.Requests.ImpersonateStartRequest)">
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="request"/> is null</exception>>
        </member>
        <member name="M:Castle.CastleClient.ImpersonateEnd(Castle.Messages.Requests.ImpersonateEndRequest)">
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="request"/> is null</exception>>
        </member>
        <member name="M:Castle.CastleClient.ArchiveDevices(System.String)">
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="userId"/> is null or empty</exception>>
        </member>
        <member name="M:Castle.Config.CastleConfiguration.#ctor(System.String)">
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="apiSecret"/> is null or empty</exception>>
        </member>
        <member name="P:Castle.Config.CastleConfiguration.ApiSecret">
            <summary>
            Secret used to authenticate with the Castle Api (Required)
            </summary>
        </member>
        <member name="P:Castle.Config.CastleConfiguration.FailOverStrategy">
            <summary>
            The response action to return in case of a failover in an Authenticate request
            </summary>
        </member>
        <member name="P:Castle.Config.CastleConfiguration.Timeout">
            <summary>
            Timeout for requests, in milliseconds
            </summary>
        </member>
        <member name="P:Castle.Config.CastleConfiguration.BaseUrl">
            <summary>
            Base Castle Api url
            </summary>
        </member>
        <member name="P:Castle.Config.CastleConfiguration.LogLevel">
            <summary>
            Log level applied by the injected <see cref="T:Castle.Infrastructure.ICastleLogger"/> implementation
            </summary>
        </member>
        <member name="P:Castle.Config.CastleConfiguration.AllowList">
            <summary>
            AllowList for headers in request context object
            </summary>
        </member>
        <member name="P:Castle.Config.CastleConfiguration.DenyList">
            <summary>
            DenyList for headers in request context object
            </summary>
        </member>
        <member name="P:Castle.Config.CastleConfiguration.DoNotTrack">
            <summary>
            If true, no requests are actually sent to the Castle Api, and Authenticate returns a failover response
            </summary>
        </member>
        <member name="P:Castle.Config.CastleConfiguration.Logger">
            <summary>
            Your own logger implementation, for internal SDK logging
            </summary>
        </member>
        <member name="T:Castle.Events">
            <summary>
            Castle tracking event constants
            </summary>
        </member>
        <member name="T:Castle.Headers">
            <summary>
            Recommended request context headers
            </summary>
        </member>
        <member name="T:Castle.Infrastructure.Exceptions.CastleExternalException">
            <summary>
            Exception that will be allowed to escape the SDK
            </summary>
        </member>
        <member name="T:Castle.Infrastructure.Exceptions.CastleInternalException">
            <summary>
            Exception for internal SDK errors, which must not escape to the outside
            </summary>
        </member>
        <member name="T:Castle.Messages.Responses.VoidResponse">
            <summary>
            Provides consistent internal interfaces for requests with no response
            </summary>
        </member>
        <member name="M:Castle.Signature.Compute(System.String,System.String)">
            <summary>
            Computes hex-encoded (lower-case) SHA-256 HMAC
            </summary>
            <param name="key"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
    </members>
</doc>
